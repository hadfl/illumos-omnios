#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright (c) 1992, 2010, Oracle and/or its affiliates. All rights reserved.
# Copyright 2017 Hayashi Naoyuki
# Copyright 2025 Michael van der Westhuizen
#

$(OBJS_DIR)/%.o:		$(UTSBASE)/armv8/io/ns16550a/%.c
	$(COMPILE.c) -o $@ $<
	$(CTFCONVERT_O)

$(OBJS_DIR)/%.o:		$(UTSBASE)/armv8/io/%.c
	$(COMPILE.c) -o $@ $<
	$(CTFCONVERT_O)

#
# Explicitly list objects that depend on raw libfdt so that we can
# be aware of these dependencies and limit them as much as possible.
#
$(OBJS_DIR)/fakebop.o := CPPFLAGS += -I$(SRC)/contrib/libfdt

$(OBJS_DIR)/%.o:		$(UTSBASE)/armv8/os/%.c
	$(COMPILE.c) $(EARLY_CFLAGS) -o $@ $<
	$(CTFCONVERT_O)

$(OBJS_DIR)/%.o:		$(UTSBASE)/armv8/boot/%.c
	$(COMPILE.c) $(EARLY_CFLAGS) -o $@ $<
	$(CTFCONVERT_O)

$(OBJS_DIR)/%.o:		$(UTSBASE)/armv8/vm/%.c
	$(COMPILE.c) -o $@ $<
	$(CTFCONVERT_O)

$(OBJS_DIR)/%.o:		$(UTSBASE)/armv8/ml/%.S $(ASSYM_H)
	$(COMPILE.s) -o $@ $<

$(OBJS_DIR)/%.o:		$(UTSBASE)/armv8/conf/%.c
	$(COMPILE.c) -o $@ $<
	$(CTFCONVERT_O)

$(OBJS_DIR)/%.o:		$(UTSBASE)/common/io/%.c
	$(COMPILE.c) -o $@ $<
	$(CTFCONVERT_O)

$(OBJS_DIR)/%.o:		$(UTSBASE)/armv8/io/gfx_private/%.c
	$(COMPILE.c) -o $@ $<
	$(CTFCONVERT_O)

#
# Rules for the direct-boot shim.
#
DBOOT_OBJS_DIR	= dboot/$(OBJS_DIR)
DBOOT_MACH_64	= -D_BOOT_TARGET_aarch64
DBOOT_DEFS	= -D_BOOT $(DBOOT_MACH_$(CLASS))
DBOOT_DEFS	+= -D_MACHDEP -U_KERNEL
DBOOT_FLAGS	= $(aarch64_CFLAGS) $(CSTD) $(COPTFLAG) $(C_BIGPICFLAGS)
DBOOT_FLAGS	+= $(CCVERBOSE) $(CERRWARN) $(CCNOAUTOINLINE)
DBOOT_FLAGS	+= -_gcc=-march=armv8-a+nofp+nosimd
DBOOT_ASFLAGS	= $(C_BIGPICFLAGS) $(ASFLAGS_XARCH_64) -D_ASM

DBOOT_CC_INCL	= -I$(SRC)/contrib/libfdt $(INCLUDE_PATH)
DBOOT_AS_INCL	= $(AS_INC_PATH)

$(DBOOT_OBJS_DIR)/%.o:		$(UTSBASE)/armv8/dboot/%.c
	$(aarch64_CC) $(DBOOT_FLAGS) -O \
	    $(DBOOT_DEFS) $(DBOOT_CC_INCL) -c -o $@ $<

$(DBOOT_OBJS_DIR)/%.o:		$(UTSBASE)/armv8/dboot/%.S $(ASSYM_H)
	$(COMPILE.s) -o $@ $<

$(DBOOT_OBJS_DIR)/%.o:		$(UTSBASE)/armv8/boot/%.c
	$(aarch64_CC) $(DBOOT_FLAGS) -O \
	    $(DBOOT_DEFS) $(DBOOT_CC_INCL) -c -o $@ $<

$(DBOOT_OBJS_DIR)/%.o:		$(SRC)/common/font/%.c
	$(aarch64_CC) $(DBOOT_FLAGS) -O \
	    $(DBOOT_DEFS) $(DBOOT_CC_INCL) -c -o $@ $<

# dboot fonts: .bdf -> (generated) .c
$(DBOOT_OBJS_DIR)/$(FONT).c:	$(FONT_DIR)/$(FONT_SRC).bdf
	$(VTFONTCVT) -f source -o $@ $(FONT_DIR)/$(FONT_SRC).bdf

# dboot fonts: (generated) .c -> .o
$(DBOOT_OBJS_DIR)/%.o:		$(DBOOT_OBJS_DIR)/%.c
	$(aarch64_CC) $(DBOOT_FLAGS) -O \
	    $(DBOOT_DEFS) $(DBOOT_CC_INCL) -c -o $@ $<

# for libfdt objects
$(DBOOT_OBJS_DIR)/%.o:		$(SRC)/contrib/libfdt/%.c
	$(aarch64_CC) $(DBOOT_FLAGS) -O \
	    $(DBOOT_DEFS) $(DBOOT_CC_INCL) -c -o $@ $<

# for getoptstr.o
$(DBOOT_OBJS_DIR)/%.o:		$(COMMONBASE)/util/%.c
	$(aarch64_CC) $(DBOOT_FLAGS) -O \
	    $(DBOOT_DEFS) $(DBOOT_CC_INCL) -c -o $@ $<

# for bitext.o
$(DBOOT_OBJS_DIR)/%.o:		$(COMMONBASE)/bitext/%.c
	$(aarch64_CC) $(DBOOT_FLAGS) -O \
	    $(DBOOT_DEFS) $(DBOOT_CC_INCL) -c -o $@ $<

#
# NOTE: Linking dboot is also quite special, and is dealt with
# in the unix Makefile.
#

$(OBJS_DIR)/dtracestubs.s:	$(UNIX_O) $(LIBS)
	$(NM) -u $(UNIX_O) $(LIBS) | $(GREP) __dtrace_probe_ | $(SORT) | \
	    $(UNIQ) | $(AWK) \
	    '{ print "\t.globl "$$1"\n\t.type "$$1", @function\n"$$1":\n"}' \
	    > $(OBJS_DIR)/dtracestubs.s

$(DTRACESTUBS):	$(DTRACESTUBS_O)
	$(BUILD.SO) $(DTRACESTUBS_O)

install_h:


$(OBJS_DIR)/%.o:		$(SRC)/common/atomic/aarch64/%.c
	$(COMPILE.c) -o $@ $<
	$(CTFCONVERT_O)


$(OBJS_DIR)/%.o:		$(SRC)/uts/armv8/io/pciex/%.c
	$(COMPILE.c) -o $@ $<
	$(CTFCONVERT_O)

$(OBJS_DIR)/%.o:		$(SRC)/uts/armv8/io/pciex/ecam/%.c
	$(COMPILE.c) -o $@ $<
	$(CTFCONVERT_O)
